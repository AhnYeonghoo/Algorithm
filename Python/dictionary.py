# 딕셔너리는 key와 value의 쌍으로 이루어진 자료형이며
# 순서가 존재하여 인덱싱 할 수 있는 리스트와 튜플과는 다르게
# key라는 고유값으로 value를 얻어낼 수 있는 자료형이다.
# 이러한 특징으로 불변하는 데이터를 key로 이용할 수 있다.
# 딕셔너리는 내부적으로 해시테이블을 사용하므로, 기본적으로
# 데이터의 검색, 수정에 효율적으로 O(1) 상수시간이 소요되어 리스트보다 훨씬 빠르다
# 또한, 불변 데이터인 튜플 자료형이 딕셔너리의 key로도 활용된다.

data = dict()
data['사과'] = "Apple"
data['바나나'] = "Banana"
data['코코넛'] = "Coconut"
print(data)

# 딕셔너리에 특정 원소가 존재하는 지 검사 할 때는 원소 in 딕셔너리
# 의 형태로 사용할 수 있고, 이는 리스트, 튜플도 가능하다.

if '사과' in data:
    print("사과가 있다.")
    
# *** 리스트, 문자열, 튜플 등 원소들을 차례대로 반복할 수 있는 자료형을
# Iterable한 자료형이라고 한다. 이러한 Iterable 자료형들은
# 그 내부에 원소들을 포함하는 컨테이너 역할도 하는 것이 대부분이기에
# in 문법도 사용이 가능하다.

# 딕셔너리를 활용하기 위해선 관련 함수를 잘 알아두는 게 좋다.

# 키 데이터를 뽑아 리스트로 이용하는 keys()와 
# 값 데이터를 뽑아 리스트로 이용하는 values()가 존재한다.

key_list = data.keys()
value_list = data.values()
print(key_list)
print(value_list)

for key in key_list:
    print(data[key])